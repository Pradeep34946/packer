package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"golang.org/x/tools/go/packages"
)

var (
	typeNames  = flag.String("type", "", "comma-separated list of type names; must be set")
	output     = flag.String("output", "", "output file name; default srcdir/<type>_hcl2.go")
	trimprefix = flag.String("trimprefix", "", "trim the `prefix` from the generated constant names")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of stringer:\n")
	fmt.Fprintf(os.Stderr, "\tstringer [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tstringer [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("hcl2-schema: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	g := Generator{}

	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		dir = filepath.Dir(args[0])
	}

	g.parsePackage(args)

	// Print the header and package clause.
	g.Printf("// Code generated by \"hcl2-schema %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf(`import "github.com/hashicorp/packer/hcl2template"`)

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_hcl2_schema.go", types[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.

	StructDefinition // This fields  reset for each type being generated.
}

type StructDefinition struct {
	TypeName string  // Name of the type.
	Fields   []Field // Fields of the type
}

// Field represents a declared type in a struct.
type Field struct {
	Name string // The name of the type.
	Type string
}

type Package struct {
	name  string
	defs  map[*ast.Ident]types.Object
	files []*File
}

// parsePackage analyzes the single package constructed from the patterns and tags.
// parsePackage exits if there is an error.
func (g *Generator) parsePackage(patterns []string) {
	cfg := &packages.Config{
		Mode:  packages.LoadSyntax,
		Tests: false,
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	g.addPackage(pkgs[0])
}

// addPackage adds a type checked Package and its syntax files to the generator.
func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &Package{
		name:  pkg.Name,
		defs:  pkg.TypesInfo.Defs,
		files: make([]*File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.files[i] = &File{
			file: file,
			pkg:  g.pkg,
		}
	}
}

// generate produces the HCL2Schema method for the named type.
func (g *Generator) generate(typeName string) {
	var s StructDefinition
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.TypeName = typeName
		file.Fields = nil
		if file.file != nil {
			ast.Inspect(file.file, file.genDecl)
			if len(file.Fields) != 0 {
				s = file.StructDefinition
				break
			}
		}
	}

	if len(s.Fields) == 0 {
		log.Fatalf("no field defined for type %s", typeName)
	}

	g.build(s)
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (v *Field) String() string {
	return "something something" + v.Name
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	typeDecl, ok := node.(*ast.GenDecl)
	if !ok {
		return true
	}
	typeSpec, ok := typeDecl.Specs[0].(*ast.TypeSpec)
	if !ok {
		return true
	}
	structDecl, ok := typeSpec.Type.(*ast.StructType)
	if !ok {
		return true
	}
	if typeSpec.Name.String() != f.StructDefinition.TypeName {
		return true
	}
	fields := structDecl.Fields.List
	for _, field := range fields {
		if len(field.Names) == 0 {
			continue
		}
		fieldType, ok := field.Type.(*ast.Ident)
		if !ok {
			continue
		}

		v := Field{
			Name: field.Names[0].String(),
		}

		switch fieldType.String() {
		case "struct":
		default:
			v.Type = "hcl2template.Type" + strings.Title(fieldType.String())
		}

		f.Fields = append(f.Fields, v)
	}

	return false
}

// Helpers

func (g *Generator) build(def StructDefinition) {
	var tpl = template.Must(template.New("flatHCL2SchemaTemplate").
		Parse(`
func (*{{ .TypeName }}) HCL2Schema() {
	return map[string]hcl2template.Schema{
		{{- range .Fields}}
		"{{ .Name }}": {
			Type:        {{ .Type }},
			Required:    false,
			Optional:    true,
			Description: "Auto generated field",
		},
		{{- end }}
	}
}`))
	err := tpl.Execute(&g.buf, def)
	if err != nil {
		log.Fatal(err)
	}
}
